# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

# Font {{{

# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants. By default they are derived automatically,
# by the OSes font system. Setting them manually is useful for font families
# that have many weight variants like Book, Medium, Thick, etc. For example:
# font_family Operator Mono Book
# bold_font Operator Mono Thick
# bold_italic_font Operator Mono Medium

italic_font      auto
bold_font        auto
bold_italic_font auto

font_family      Fira Code Retina
font_size        12.0

# font_family      Fantasque Sans Mono
# font_size        14.0

# font_family      Iosevka Term
# font_size        13.0
# italic_font      Iosevka Term Italic
# bold_font        Iosevka Term Bold
# bold_italic_font Iosevka Term Bold Italic

# font_family      Scientifica
# font_size        11.0
# italic_font      Scientifica Italic
# bold_font        Scientifica Bold
# bold_italic_font Scientifica Italic

# font_family      Curie Medium
# font_size        12.0
# italic_font      Curie Italic
# bold_font        Curie Bold
# bold_italic_font Curie BoldItalic

macos_thicken_font 0.4

# The amount the font size is changed by (in pts) when increasing/decreasing
# the font size in a running terminal.
font_size_delta 1

# Adjust the line height.
# You can use either numbers, which are interpreted as pixels or percentages
# (number followed by %), which are interpreted as percentages of the
# unmodified line height. You can use negative pixels or percentages less than
# 100% to reduce line height (but this might cause rendering artifacts).
adjust_line_height 0

# Change the sizes of the lines used for the box drawing unicode characters
# These values are in pts. They will be scaled by the monitor DPI to arrive at
# a pixel value. There must be four values corresponding to thin, normal, thick,
# and very thick lines;
box_drawing_scale 0.001, 1, 1.5, 2

# }}}

# Cursor {{{

# The cursor shape can be one of (block, beam, underline)
cursor_shape     block

# The interval (in seconds) at which to blink the cursor. Set to zero to
# disable blinking.
cursor_blink_interval     0.5

# Stop blinking cursor after the specified number of seconds of keyboard inactivity. Set to
# zero to never stop blinking.
cursor_stop_blinking_after 15.0

# }}}

# Scrollback {{{

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 2000

# Program with which to view scrollback in a new window. The scrollback buffer is passed as
# STDIN to this program. If you change it, make sure the program you use can
# handle ANSI escape sequences for colors and text formatting.
scrollback_pager less +G -R

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
wheel_scroll_multiplier 3.5

# }}}

# Mouse {{{

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
mouse_hide_wait 3.0

# Set the active window to the window under the mouse when moving the mouse around
focus_follows_mouse no

# }}}

# Window {{{

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
enabled_layouts *

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   640
initial_window_height  400

# Delay (in milliseconds) between screen updates. Decreasing it, increases fps
# at the cost of more CPU usage. The default value yields ~100fps which is more
# that sufficient for most uses.
repaint_delay    10

# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell no

# The modifier keys to press when clicking with the mouse on URLs to open the URL
open_url_modifiers super

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# The modifiers to use rectangular selection (i.e. to select text in a
# rectangular block with the mouse)
rectangle_select_modifiers ctrl+alt

# The value of the TERM environment variable to set
term xterm-kitty

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
window_border_width 2

# The window margin (in pts) (blank area outside the border)
window_margin_width 5

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 5

# The tab bar style, can be one of: fade or separator. In the fade style, each tabâ€™s edges fade into
# the background color, in the separator style, tabs are separated by a configurable separator.
tab_bar_style fade

# }}}

# Theme {{{

# The opacity of the background. A number between 0 and 1, where 1 is opaque and 0 is fully transparent.
# This will only work if supported by the OS (for instance, when using a compositor under X11). Note
# that it only sets the default background color's opacity. This is so that
# things like the status bar in vim, powerline prompts, etc. still look good.
# But it means that if you use a color theme with a background color in your
# editor, it will not be rendered as transparent.  Instead you should change the
# default background color in your kitty config and not use a background color
# in the editor color scheme. Or use the escape codes to set the terminals
# default colors in a shell script to launch your editor.
# Be aware that using a value less than 1.0 is a (possibly significant) performance hit.
background_opacity 1.0

# Include colour scheme file.
include ~/dotfiles/kitty/gruvbox-dark.conf
# }}}

# Key mapping {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.

# Clipboard
map super+v      paste_from_clipboard
map ctrl+shift+s paste_from_selection
map super+c      copy_to_clipboard
map shift+insert paste_from_selection

# Scrolling
map ctrl+shift+up        scroll_line_up
map ctrl+shift+down      scroll_line_down
map ctrl+shift+k         scroll_line_up
map ctrl+shift+j         scroll_line_down
map ctrl+shift+page_up   scroll_page_up
map ctrl+shift+page_down scroll_page_down
map ctrl+shift+home      scroll_home
map ctrl+shift+end       scroll_end
map ctrl+shift+h         show_scrollback

# Window management
map ctrl+shift+n     new_window_with_cwd
map super+n          new_os_window_with_cwd
map super+shift+n    new_os_window
map super+w          close_window
map ctrl+shift+]     next_window
map ctrl+shift+[     previous_window
map ctrl+shift+f     move_window_forward
map ctrl+shift+b     move_window_backward
map ctrl+shift+`     move_window_to_top
map ctrl+shift+1     first_window
map ctrl+shift+2     second_window
map ctrl+shift+3     third_window
map ctrl+shift+4     fourth_window
map ctrl+shift+5     fifth_window
map ctrl+shift+6     sixth_window
map ctrl+shift+7     seventh_window
map ctrl+shift+8     eighth_window
map ctrl+shift+9     ninth_window
map ctrl+shift+0     tenth_window

# Tab management
map alt+tab       next_tab
map alt+shift+tab previous_tab
map ctrl+shift+z  next_tab
map ctrl+shift+x  previous_tab
map super+t       new_tab_with_cwd
map ctrl+shift+w  close_tab
map ctrl+shift+p  next_layout
# map ctrl+shift+.  move_tab_forward
# map ctrl+shift+,  move_tab_backward
map ctrl+shift+,  set_tab_title
# NOTE: these do not work ...
map ctrl+tab       next_tab
map ctrl+shift+tab previous_tab

# Miscellaneous
map ctrl+shift+equal     increase_font_size
map ctrl+shift+minus     decrease_font_size
map ctrl+shift+backspace restore_font_size

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# send_text all ctrl+alt+a Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# send_text normal ctrl+alt+a Word\x1b[H
# send_text application ctrl+alt+a Word\x1bOH

# remove word
map alt+backspace send_text all \x17
# remove line
map super+backspace send_text all \x15
# move to beginning
map super+left send_text all \x01
# move to end
map super+right send_text all \x05

# Symbol mapping (special font for specified unicode code points). Map the
# specified unicode codepoints to a particular font. Useful if you need special
# rendering for some symbols, such as for Powerline. Avoids the need for
# patched fonts. Each unicode code point is specified in the form U+<code point
# in hexadecimal>. You can specify multiple code points, separated by commas
# and ranges separated by hyphens. symbol_map itself can be specified multiple times.
# Syntax is:
#
# symbol_map codepoints Font Family Name
#
# For example:
#
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

# }}}

# OS specific tweaks {{{

# Hide the kitty window's title bar on macOS.
macos_hide_titlebar no

# macos_titlebar_custom_color yes
# macos_titlebar_background #1d2021
# macos_titlebar_light_foreground yes
macos_titlebar_color background

# Use the option key as an alt key. With this set to no, kitty will use
# the macOS native Option+Key = unicode character behavior. This will
# break any Alt+key keyboard shortcuts in your terminal programs, but you
# can use the macOS unicode input technique.
macos_option_as_alt no

macos_quit_when_last_window_closed no

allow_remote_control yes

# }}}
